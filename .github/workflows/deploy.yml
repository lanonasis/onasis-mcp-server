name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Build TypeScript
      run: |
        echo "üî® Building TypeScript..."
        if bun run build; then
          echo "‚úÖ Build successful"
          echo "BUILD_SUCCESS=true" >> $GITHUB_ENV
        else
          echo "‚ùå Build failed, will use fallback"
          echo "BUILD_SUCCESS=false" >> $GITHUB_ENV
        fi
      
    - name: Run tests
      run: bun test || echo "Tests not configured yet"
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add VPS to known hosts
      run: |
        ssh-keyscan -p 2222 -H 168.231.74.29 >> ~/.ssh/known_hosts
        
    - name: Deploy to VPS
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST || '168.231.74.29' }}
        DEPLOY_PORT: ${{ secrets.DEPLOY_PORT || '2222' }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER || 'root' }}
      run: |
        ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST << 'ENDSSH'
        set -e
        
        # Configuration
        DEPLOY_PATH="/opt/mcp-servers/lanonasis-standalone"
        SERVICE_NAME="lanonasis-mcp-server"
        GIT_REPO="https://github.com/lanonasis/onasis-mcp-server.git"
        
        # Fail fast if SERVICE_NAME is not set
        : "${SERVICE_NAME:?SERVICE_NAME is required and cannot be empty}"
        
        echo "üöÄ Starting automated deployment..."
        
        # Create deployment directories
        mkdir -p /opt/mcp-servers
        mkdir -p /var/log/pm2
        mkdir -p /var/log/lanonasis-mcp
        mkdir -p /opt/certs
        
        # Navigate to deployment path
        mkdir -p $DEPLOY_PATH
        cd $DEPLOY_PATH
        
        # Backup existing deployment
        if [ -d "current" ]; then
          echo "üì¶ Backing up current deployment..."
          mv current backup-$(date +%Y%m%d-%H%M%S)
          
          # Keep only last 5 backups
          ls -dt backup-* 2>/dev/null | tail -n +6 | xargs rm -rf 2>/dev/null || true
        fi
        
        # Clone fresh copy
        echo "üì• Cloning latest code..."
        git clone --depth 1 $GIT_REPO current
        cd current
        
        # Ensure runtime prerequisites
        echo "üì¶ Ensuring runtime prerequisites..."
        if ! command -v pm2 >/dev/null; then
          echo "Installing PM2..."
          npm i -g pm2 || (corepack enable && pnpm add -g pm2) || { echo "‚ùå PM2 install failed"; exit 1; }
        fi
        if ! command -v bun >/dev/null; then
          echo "Installing Bun..."
          curl -fsSL https://bun.sh/install | bash && export BUN_INSTALL="$HOME/.bun" && export PATH="$BUN_INSTALL/bin:$PATH"
        fi
        if ! command -v node >/dev/null; then
          echo "Installing Node.js..."
          curl -fsSL https://deb.nodesource.com/setup_lts.x | bash && apt-get install -y nodejs
        fi
        # Install dependencies including runtime fallbacks
        echo "üì¶ Installing dependencies..."
        bun install --production --frozen-lockfile || bun install --production || npm ci --omit=dev

        # Ensure tsx is available as fallback TypeScript runtime
        if ! command -v tsx >/dev/null; then
          echo "üì¶ Installing tsx as TypeScript runtime fallback..."
          npm install -g tsx || echo "‚ö†Ô∏è  tsx installation failed but continuing"
        fi
        
        # Build TypeScript using the standard build process
        echo "üî® Building TypeScript with standard build process..."
        
        if [ -f "tsconfig.build.json" ]; then
          echo "üì¶ Using tsconfig.build.json for production build..."
          if bun run build; then
            echo "‚úÖ TypeScript build successful"
            echo "üìÅ Build output:"
            ls -la dist/ || echo "No dist directory found"
          else
            echo "‚ùå TypeScript build failed"
            echo "‚ö†Ô∏è  Will use existing files if available"
          fi
        else
          echo "‚ö†Ô∏è  No tsconfig.build.json found, using existing files"
        fi
        
        # Setup environment
        echo "‚öôÔ∏è  Configuring environment..."
        if [ ! -f .env.production ]; then
          echo "Creating basic .env.production..."
          cp .env.example .env.production
        fi

        # Create production environment file with secrets
        umask 177
        cat > .env.production <<EOF
SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
NODE_ENV=production
PORT=3001
EOF
        chmod 600 .env.production

        # Copy SSL certificate if exists
        if [ -f "src/config/prod-ca-2021.crt" ]; then
          cp src/config/prod-ca-2021.crt /opt/certs/
          chmod 600 /opt/certs/prod-ca-2021.crt
          chown root:root /opt/certs/prod-ca-2021.crt
          chmod 700 /opt/certs || true
          echo "‚úÖ SSL certificate configured"
        fi

        # Restart PM2 service using ecosystem configuration
        echo "üîÑ Restarting service..."
        pm2 stop $SERVICE_NAME 2>/dev/null || true
        pm2 delete $SERVICE_NAME 2>/dev/null || true

        # Start the MCP server using ecosystem configuration
        echo "üöÄ Starting MCP Server using ecosystem configuration..."
        if [ -f "ecosystem.config.js" ]; then
          echo "üìÑ Using ecosystem.config.js"
          if pm2 start ecosystem.config.js --env production; then
            echo "‚úÖ PM2 startup command succeeded"
            echo "‚úÖ Deployed MCP server with ecosystem configuration!"
          else
            echo "‚ùå PM2 startup failed (ecosystem), exit code: $?"
            pm2 logs --lines 20 --nostream || true
            exit 1
          fi
        else
          echo "‚ùå ecosystem.config.js not found"
          echo "üîç Available files in current directory:"
          ls -la
          exit 1
        fi

        pm2 save

        # Wait and check status
        sleep 5
        if pm2 list | grep -Eq "($SERVICE_NAME|ecosystem).*online"; then
          echo "‚úÖ Deployment successful!"
          echo "üìä Service Status:"
          pm2 list
          pm2 show "$SERVICE_NAME" || true
        else
          echo "‚ùå Deployment failed!"
          pm2 logs "$SERVICE_NAME" --lines 20
          exit 1
        fi

        echo "üéâ Automated deployment completed at $(date)"
        echo "üì¶ Deployed commit: $(git rev-parse --short HEAD)"

        ENDSSH
        
    - name: Verify deployment
      run: |
        # Wait for service to be ready with retries
        echo "üîç Verifying deployment and server type..."
        
        # Retry health check with timeout
        for i in {1..12}; do
          STATUS=$(curl -sS -o /tmp/health.out -w '%{http_code}' http://${{ secrets.VPS_HOST }}:3001/health --max-time 5 || true)
          if [ "$STATUS" = "200" ]; then
            echo "‚úÖ Health endpoint responding (attempt $i)"
            break
          fi
          echo "‚è≥ Waiting for service to be ready (attempt $i/12)..."
          sleep 5
        done
        
        # Read health response from file
        HEALTH_RESPONSE=$(cat /tmp/health.out 2>/dev/null || echo "HEALTH_FAILED")

        if [ "$HEALTH_RESPONSE" = "HEALTH_FAILED" ]; then
          echo "‚ùå Health endpoint unreachable"
          echo "üîç Checking if service is running..."
          ssh -p 2222 root@168.231.74.29 "pm2 list | grep lanonasis-mcp-server || echo 'Service not found'"
          echo "‚ö†Ô∏è  Health check failed, but continuing verification"
        else
          echo "‚úÖ Health endpoint responding"

          # Check if this is the comprehensive unified server or basic fallback
          if echo "$HEALTH_RESPONSE" | grep -q "fallback\|Fallback"; then
            echo "‚ö†Ô∏è  WARNING: BASIC FALLBACK SERVER IS DEPLOYED!"
            echo "üîß This means the TypeScript build failed and we're running the 70-line simple server"
            echo "üìä Response: $HEALTH_RESPONSE"

            # Get deployment logs to understand why build failed
            echo "üîç Checking deployment logs for build failure..."
            ssh -p 2222 root@168.231.74.29 "pm2 logs lanonasis-mcp-server --lines 50 --nostream" || echo "Could not fetch logs"

          elif echo "$HEALTH_RESPONSE" | grep -q "17.*tools\|enterprise\|unified\|Lanonasis.*MCP"; then
            echo "üéâ SUCCESS: UNIFIED MCP SERVER WITH ENTERPRISE TOOLS IS DEPLOYED!"
            echo "‚úÖ Comprehensive unified server detected (17+ tools)"
            echo "üìä Server details:"
            echo "$HEALTH_RESPONSE" | head -10

          else
            echo "‚ùì Unknown server type deployed"
            echo "üìä Response: $HEALTH_RESPONSE"
          fi
        fi

        # Final deployment summary
        echo ""
        echo "=========================================="
        echo "üöÄ DEPLOYMENT VERIFICATION COMPLETE"
        echo "=========================================="
        echo "üìÖ Deployed at: $(date)"
        echo "üåê Endpoint: https://mcp.lanonasis.com/health"
        echo "üì¶ Expected: Unified MCP Server (17+ tools)"
        echo "‚ö†Ô∏è  If fallback server was deployed, check build logs above"
        echo "=========================================="
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "üéâ Deployment to VPS successful!"
        else
          echo "‚ùå Deployment to VPS failed!"
        fi
