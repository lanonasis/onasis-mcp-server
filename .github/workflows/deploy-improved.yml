name: Deploy to VPS - Enhanced

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  SERVICE_NAME: lanonasis-mcp-server
  DEPLOY_PATH: /opt/mcp-servers/lanonasis

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    outputs:
      build_success: ${{ steps.build.outputs.success }}
      test_success: ${{ steps.test.outputs.success }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        bun install --frozen-lockfile
        
    - name: TypeScript Build
      id: build
      run: |
        echo "🔨 Building TypeScript..."
        if bun run build; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ TypeScript build successful"
          echo "BUILD_STATUS=✅ SUCCESS" >> $GITHUB_ENV
        else
          echo "success=false" >> $GITHUB_OUTPUT
          echo "⚠️ TypeScript build failed - will use fallback deployment"
          echo "BUILD_STATUS=⚠️ FALLBACK" >> $GITHUB_ENV
          
          # Ensure fallback server exists
          if [ ! -f simple-mcp-server.cjs ]; then
            echo "Creating fallback CommonJS server..."
            cat > simple-mcp-server.cjs << 'EOFJS'
const express = require('express');
const { createServer } = require('http');
const app = express();

app.use(express.json());

app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    service: 'Lanonasis MCP Server (Fallback)',
    timestamp: new Date().toISOString(),
    version: '1.0.0-fallback',
    build: 'commonjs'
  });
});

app.get('/status', (req, res) => {
  const uptime = process.uptime();
  const memory = process.memoryUsage();
  
  res.json({
    status: 'operational',
    service: 'Lanonasis MCP Server (Fallback)',
    uptime: uptime,
    memory: {
      used: Math.round(memory.heapUsed / 1024 / 1024),
      total: Math.round(memory.heapTotal / 1024 / 1024),
      percentage: Math.round((memory.heapUsed / memory.heapTotal) * 100)
    },
    environment: process.env.NODE_ENV || 'production'
  });
});

const port = process.env.PORT || 3001;
const server = createServer(app);

server.listen(port, '0.0.0.0', () => {
  console.log(`🚀 Fallback MCP Server running on port ${port}`);
  console.log(`📊 Memory usage: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down gracefully');
  server.close(() => {
    console.log('Process terminated');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  console.log('SIGINT received, shutting down gracefully');
  server.close(() => {
    console.log('Process terminated');
    process.exit(0);
  });
});
EOFJS
            echo "✅ Fallback server created"
          fi
        fi
        
    - name: Run Tests
      id: test
      run: |
        echo "🧪 Running tests..."
        # Create test output directory
        mkdir -p test-results
        
        if bun test --reporter=verbose > test-results/output.txt 2>&1; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ All tests passed"
          echo "TEST_STATUS=✅ PASSED" >> $GITHUB_ENV
          
          # Show test summary
          echo "📊 Test Results:"
          tail -10 test-results/output.txt
        else
          echo "success=false" >> $GITHUB_OUTPUT
          echo "⚠️ Some tests failed"
          echo "TEST_STATUS=⚠️ PARTIAL" >> $GITHUB_ENV
          
          # Show failed tests
          echo "❌ Test Failures:"
          grep -A5 -B5 "fail\|error" test-results/output.txt | tail -20 || echo "See full output in artifacts"
        fi
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-results/
        
    - name: Build Summary
      run: |
        echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| TypeScript Build | $BUILD_STATUS | ${{ steps.build.outputs.success == 'true' && 'Compiled successfully' || 'Using fallback CommonJS' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | $TEST_STATUS | ${{ steps.test.outputs.success == 'true' && 'All tests passed' || 'Some tests failed - review required' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Step**: ${{ steps.build.outputs.success == 'true' && 'Deploy with TypeScript build' || 'Deploy with CommonJS fallback' }}" >> $GITHUB_STEP_SUMMARY

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add VPS to known hosts
      run: |
        ssh-keyscan -p ${{ secrets.VPS_PORT }} -H $(echo ${{ secrets.VPS_HOST }} | cut -d@ -f2) >> ~/.ssh/known_hosts
        
    - name: Deploy to VPS
      run: |
        ssh -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_HOST }} << 'ENDSSH'
        set -e
        
        # Configuration
        DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
        SERVICE_NAME="${{ env.SERVICE_NAME }}"
        GIT_REPO="https://github.com/lanonasis/onasis-mcp-server.git"
        BUILD_SUCCESS="${{ needs.build-and-test.outputs.build_success }}"
        TEST_SUCCESS="${{ needs.build-and-test.outputs.test_success }}"
        
        echo "🚀 Starting enhanced deployment..."
        echo "📊 Build Status: $BUILD_SUCCESS | Test Status: $TEST_SUCCESS"
        
        # Create deployment directories
        mkdir -p /opt/mcp-servers
        mkdir -p /var/log/pm2
        mkdir -p /var/log/lanonasis-mcp
        mkdir -p /opt/certs
        
        # Navigate to deployment path
        mkdir -p $DEPLOY_PATH
        cd $DEPLOY_PATH
        
        # Backup existing deployment with better naming
        if [ -d "current" ]; then
          BACKUP_NAME="backup-$(date +%Y%m%d-%H%M%S)"
          echo "📦 Creating backup: $BACKUP_NAME"
          mv current $BACKUP_NAME
          
          # Keep only last 5 backups
          ls -dt backup-* 2>/dev/null | tail -n +6 | xargs rm -rf 2>/dev/null || true
        fi
        
        # Clone fresh copy
        echo "📥 Cloning latest code..."
        git clone --depth 1 $GIT_REPO current
        cd current
        
        # Show deployment info
        echo "📦 Deployed commit: $(git rev-parse --short HEAD)"
        echo "📝 Commit message: $(git log -1 --pretty=%B)"
        
        # Install dependencies
        echo "📦 Installing dependencies..."
        bun install --production --frozen-lockfile || bun install --production
        
        # Build TypeScript if it succeeded in CI
        if [ "$BUILD_SUCCESS" = "true" ]; then
          echo "🔨 Building TypeScript (CI build successful)..."
          bun run build || echo "⚠️ Build failed, falling back to CommonJS"
        else
          echo "⚠️ Skipping TypeScript build (CI build failed)"
        fi
        
        # Setup environment
        echo "⚙️ Configuring environment..."
        if [ ! -f .env.production ]; then
          echo "Creating .env.production from template..."
          cat > .env.production << 'EOFENV'
NODE_ENV=production
PORT=3001
MCP_HOST=0.0.0.0

# Supabase Configuration
SUPABASE_URL=${{ secrets.SUPABASE_URL }}
SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}

# Onasis Core API
ONASIS_SUPABASE_URL=${{ secrets.SUPABASE_URL }}
ONASIS_SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}

# OpenAI
OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}

# Security
JWT_SECRET=${{ secrets.JWT_SECRET }}
EMERGENCY_BOOTSTRAP_TOKEN=${{ secrets.EMERGENCY_BOOTSTRAP_TOKEN }}

# MCP Configuration
ENABLE_HTTP=true
ENABLE_WEBSOCKET=true
ENABLE_SSE=true
ENABLE_STDIO=false

# Rate Limiting
MCP_RATE_LIMIT=100
MCP_RATE_LIMIT_WINDOW=900000
MCP_MAX_CONNECTIONS=1000
EOFENV
          echo "✅ Environment configured"
        fi
        
        # Copy SSL certificate if exists
        if [ -f "src/config/prod-ca-2021.crt" ]; then
          cp src/config/prod-ca-2021.crt /opt/certs/
          chmod 600 /opt/certs/prod-ca-2021.crt
          chown root:root /opt/certs/prod-ca-2021.crt
          echo "✅ SSL certificate configured"
        fi
        
        # Determine which server to start
        SERVER_TYPE="fallback"
        if [ -f "dist/unified-mcp-server.js" ] && [ "$BUILD_SUCCESS" = "true" ]; then
          SERVER_TYPE="typescript"
          echo "🎯 Using TypeScript build"
        elif [ -f "simple-mcp-server.cjs" ]; then
          SERVER_TYPE="commonjs"
          echo "🔄 Using CommonJS fallback"
        else
          echo "⚠️ No server found, creating minimal fallback"
        fi
        
        # Stop existing service
        echo "🛑 Stopping existing service..."
        pm2 stop $SERVICE_NAME 2>/dev/null || true
        pm2 delete $SERVICE_NAME 2>/dev/null || true
        
        # Start appropriate server
        if [ "$SERVER_TYPE" = "typescript" ]; then
          pm2 start ecosystem.config.js --env production --name $SERVICE_NAME
        elif [ "$SERVER_TYPE" = "commonjs" ]; then
          pm2 start simple-mcp-server.cjs --name $SERVICE_NAME --log-date-format="YYYY-MM-DD HH:mm Z"
        else
          # Create and start minimal server
          cat > minimal-server.cjs << 'EOFMIN'
const express = require('express');
const app = express();
const port = process.env.PORT || 3001;

app.get('/health', (req, res) => {
  res.json({ 
    status: 'healthy', 
    service: 'Minimal MCP Server',
    timestamp: new Date().toISOString()
  });
});

app.listen(port, '0.0.0.0', () => {
  console.log(\`Minimal MCP Server running on port \${port}\`);
});
EOFMIN
          pm2 start minimal-server.cjs --name $SERVICE_NAME
        fi
        
        pm2 save
        
        # Wait and verify deployment
        echo "⏳ Waiting for service to start..."
        sleep 10
        
        if pm2 list | grep -q "$SERVICE_NAME.*online"; then
          echo "✅ Deployment successful!"
          echo "📊 Service Status:"
          pm2 show $SERVICE_NAME --no-daemon
          echo ""
          echo "🔍 Service Details:"
          echo "  • Server Type: $SERVER_TYPE"
          echo "  • Build Success: $BUILD_SUCCESS"  
          echo "  • Test Success: $TEST_SUCCESS"
          echo "  • Deployed: $(date)"
        else
          echo "❌ Deployment failed!"
          echo "📋 Recent logs:"
          pm2 logs $SERVICE_NAME --lines 20 --no-daemon
          exit 1
        fi
        
        ENDSSH
        
    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        sleep 15
        
        # Test health endpoint with detailed output
        if response=$(curl -s -w "\n%{http_code}" https://mcp.lanonasis.com/health); then
          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | head -n -1)
          
          if [ "$http_code" = "200" ]; then
            echo "✅ Health check passed"
            echo "📊 Response: $body"
          else
            echo "⚠️ Health check returned HTTP $http_code"
            echo "📊 Response: $body"
          fi
        else
          echo "❌ Health check failed - service may be starting"
        fi
        
        # Test status endpoint  
        if response=$(curl -s https://mcp.lanonasis.com/status); then
          echo "📈 Status endpoint response:"
          echo "$response" | head -c 200
        fi
        
    - name: Deployment Summary
      if: always()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build Quality | ${{ needs.build-and-test.outputs.build_success == 'true' && '✅ TypeScript' || '⚠️ Fallback' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test Results | ${{ needs.build-and-test.outputs.test_success == 'true' && '✅ All Passed' || '⚠️ Some Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Deployment | ${{ job.status == 'success' && '✅ Successful' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Service URL**: https://mcp.lanonasis.com/health" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Strategy**: ${{ needs.build-and-test.outputs.build_success == 'true' && 'Primary TypeScript build' || 'CommonJS fallback for resilience' }}" >> $GITHUB_STEP_SUMMARY
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "🎉 Enhanced deployment to VPS successful!"
          echo "🔗 Service available at: https://mcp.lanonasis.com"
        else
          echo "❌ Enhanced deployment to VPS failed!"
          echo "🔍 Check logs and status above for details"
        fi